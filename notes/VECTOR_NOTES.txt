
Optimization candidates

it would be nice to build the word2vec model inside of go; then it could just be stored...
this would save to hand-off time (which can be substantial on a full corpus), but it might be slower than python's optimized C?

Word Embeddings in Go:
    https://github.com/ynqa/wego

see the speed notes at https://github.com/mklf/word2vec-rs

so you would need to call a C version of word2vec from go:

    https://karthikkaranth.me/blog/calling-c-code-from-go/

# see also: https://speakerdeck.com/chewxy/data-science-in-go?slide=81

wego/pkg/model/lexvec/options.go

func LoadForCmd(cmd *cobra.Command, opts *Options) {
	cmd.Flags().IntVar(&opts.BatchSize, "batch", defaultBatchSize, "batch size to train")
	cmd.Flags().IntVarP(&opts.Dim, "dim", "d", defaultDim, "dimension for word vector")
	cmd.Flags().IntVar(&opts.Goroutines, "goroutines", defaultGoroutines, "number of goroutine")
	cmd.Flags().BoolVar(&opts.DocInMemory, "in-memory", defaultDocInMemory, "whether to store the doc in memory")
	cmd.Flags().Float64Var(&opts.Initlr, "initlr", defaultInitlr, "initial learning rate")
	cmd.Flags().IntVar(&opts.Iter, "iter", defaultIter, "number of iteration")
	cmd.Flags().IntVar(&opts.LogBatch, "log-batch", defaultLogBatch, "batch size to log for counting words")
	cmd.Flags().IntVar(&opts.MaxCount, "max-count", defaultMaxCount, "upper limit to filter words")
	cmd.Flags().IntVar(&opts.MinCount, "min-count", defaultMinCount, "lower limit to filter words")
	cmd.Flags().Float64Var(&opts.MinLR, "min-lr", defaultMinLR, "lower limit of learning rate")
	cmd.Flags().IntVar(&opts.NegativeSampleSize, "sample", defaultNegativeSampleSize, "negative sample size")
	cmd.Flags().StringVar(&opts.RelationType, "rel", defaultRelationType, fmt.Sprintf("relation type for co-occurrence words. One of %s|%s|%s|%s", PPMI, PMI, Collocation, LogCollocation))
	cmd.Flags().Float64Var(&opts.Smooth, "smooth", defaultSmooth, "smoothing value for co-occurence value")
	cmd.Flags().Float64Var(&opts.SubsampleThreshold, "threshold", defaultSubsampleThreshold, "threshold for subsampling")
	cmd.Flags().BoolVar(&opts.ToLower, "to-lower", defaultToLower, "whether the words on corpus convert to lowercase or not")
	cmd.Flags().IntVar(&opts.UpdateLRBatch, "update-lr-batch", defaultUpdateLRBatch, "batch size to update learning rate")
	cmd.Flags().BoolVar(&opts.Verbose, "verbose", defaultVerbose, "verbose mode")
	cmd.Flags().IntVarP(&opts.Window, "window", "w", defaultWindow, "context window size")

}


interacting with the module

// func HipparchiaBagger(searchkey string, baggingmethod string, goroutines int, thedb string, thestart int, theend int, loglevel int, r RedisLogin, p PostgresLogin) string


pip install pybindgen
go mod init github.com/e-gun/e-gun/HipparchiaGoGrabberModule
go mod tidy
go get github.com/go-python/gopy/gopyh
go get golang.org/x/tools/cmd/goimports
go get github.com/go-python/gopy
gsed -i "s/package main/package hipparchiagolangsearching/" *.go
rm -rf ./golangmodule/ && gopy build -output=golangmodule -vm=`which python3` $GOPATH/src/github.com/e-gun/HipparchiaGoDBHelper/


// hipparchia_venv/HipparchiaServer/ % python3

pw = 'MYPASSWORD'
import server.externalmodule.hipparchiagolangsearching as gs
r = gs.NewRedisLogin('localhost:6379', '', 0)
p = gs.NewPostgresLogin('localhost', 5432, 'hippa_rd', pw, 'hipparchiaDB')
b = gs.HipparchiaBagger
b('', 'winnertakesall', 5, 'lt0448', 1, 26, 3, '', '', r, p)


output:

[works with v.1.2.0]
[panics as of v.1.2.1]
[works with v.1.2.2]['sonic' broke things: back to "encoding/json"]


>>> b('', 'winnertakesall', 5, 'lt0474', 1, 140000, 5, '', '', r, p)
[HGH] Bagger Module Launched
[HGH] Seeking to build *winnertakesall* bags of words
[HGH] Connected to redis
[HGH] Connected to hipparchiaDB on PostgreSQL
[HGH] No redis key; gathering lines with a direct CLI PostgreSQL query
[HGH] [A: 0.331s][Δ: 0.331s] 140000 lines acquired
[HGH] [B: 0.416s][Δ: 0.085s] Unified text block built
[HGH] [C: 0.569s][Δ: 0.153s] Preliminary cleanups complete
[HGH] [D: 1.582s][Δ: 1.013s] Found 68790 sentences
[HGH] [E: 1.652s][Δ: 0.070s] Found 80125 distinct words
[HGH] [F: 2.058s][Δ: 0.406s] Got morphology for 73819 terms
[HGH] [G: 2.088s][Δ: 0.030s] Built morphmap for 80290 terms
[HGH] [H: 2.454s][Δ: 0.366s] Finished bagging 68790 bags
[HGH] [I: 2.597s][Δ: 0.144s] Cleared stopwords: 68005 bags remain
[HGH] [J: 3.896s][Δ: 1.299s] Finished loading
'_vectorresults'


127.0.0.1:6379> spop _vectorresults 3
1) "{\"Loc\":\"line/lt0474w049/90191\",\"Bag\":\" oratio summum malius detraho affero evenio opinor\"}"
2) "{\"Loc\":\"line/lt0474w058/139322\",\"Bag\":\" fugio turbo\xc2\xb9 senatus voco curius\xc2\xb2\"}"
3) "{\"Loc\":\"line/lt0474w058/139643\",\"Bag\":\" scribo balbus\xc2\xb9 fasciculus epistula balbus\xc2\xb2 totus\xc2\xb9 aqua madidus reddo scio aliqui epistula\"}"



#
# initial results:
#

e-gun/HipparchiaGoDBHelper/ %  date && ./HipparchiaGoDBHelper -sv -l 3 -svdb lt0474 -svs 4 -sve 140000 -k "" && date
Fri May  7 15:05:07 EDT 2021
[HGH] Hipparchia Golang Helper CLI Debugging Interface (v.0.1.5) [loglevel=3]
[HGH] Seeking to build *winnertakesall* bags of words
[HGH] Connected to redis
[HGH] Connected to hipparchiaDB on PostgreSQL
[HGH] No redis key; gathering lines with a direct CLI PostgreSQL query%!(EXTRA string=hipparchiaDB)
[HGH] found 79683 sentences [D: 1.803721s]
[HGH] foundmorph contains 65693 members
[HGH] Got morphology [F: 12.326225s]
[HGH] contents of bag[0]:
[HGH] contents of bag[1]: qui² alter
[HGH] Reached result @ 21.866201s]
bags have been stored at _vectorresultsFri May  7 15:05:29 EDT 2021

#
# first optimizations:
#

1062 •erik@big-sur-box• e-gun/HipparchiaGoDBHelper/ %  date && ./HipparchiaGoDBHelper -sv -l 5 -svdb lt0474 -svs 4 -sve 140000 -k "" -p ${L} && date
Fri May  7 15:21:46 EDT 2021
[HGH] Hipparchia Golang Helper CLI Debugging Interface (v.0.1.6) [loglevel=5]
[HGH] Seeking to build *winnertakesall* bags of words
[HGH] Connected to redis
[HGH] Connected to hipparchiaDB on PostgreSQL
[HGH] No redis key; gathering lines with a direct CLI PostgreSQL query%!(EXTRA string=hipparchiaDB)
[HGH] unified text block built [B: 0.275347s])
[HGH] preliminary cleanups complete [C: 0.353454s])
[HGH] found 79683 sentences [D: 1.397037s]
[HGH] found 79975 distinct words [E: 1.458788s]
[HGH] foundmorph contains 65693 members
[HGH] Got morphology [F: 2.731060s]
[HGH] Build morphdict [F1: 5.445373s]
[HGH] Pre-Bagging [F2: 5.477660s]
[HGH] Post-Bagging [F3: 5.713629s]
[HGH] contents of bag[0]:
[HGH] contents of bag[1]: qui¹ alter
[HGH] Reached result @ 12.170620s]
bags have been stored at _vectorresultsFri May  7 15:21:58 EDT 2021


50% of your time is spent storing the bags
finding the morphology takes less time than building the morph dict...
parallel loading of redis speeds things up... [but pipelining is way faster still...]

date && ./HipparchiaGoDBHelper -sv -l 3 -svdb lt0474 -svs 4 -sve 140000 -k "" -t 5 -p ${L} && date
Mon Jun  7 17:38:01 EDT 2021
[HGH] Hipparchia Golang Helper CLI Debugging Interface (v.1.0.10) [loglevel=3]
[HGH] Bagger Module Launched
[HGH] Seeking to build *winnertakesall* bags of words
[HGH] Connected to redis
[HGH] Connected to hipparchiaDB on PostgreSQL
[HGH] No redis key; gathering lines with a direct CLI PostgreSQL query
[HGH] 139997 lines acquired [A: 0.214960s])
[HGH] unified text block built [B: 0.290444s])
[HGH] preliminary cleanups complete [C: 0.367368s])
[HGH] found 79683 sentences [D: 1.442941s]
[HGH] found 79991 distinct words [E: 1.517810s]
[HGH] Got morphology for 66334 terms [F: 2.229176s]
[HGH] Built morphmap for 66334 terms [G: 2.942428s]
[HGH] Finished bagging 79683 bags [H: 3.318505s]
[HGH] Cleared stopwords [I: 3.446793s]
[HGH] Finished loading [J: 5.156378s]
bags have been stored at _vectorresultsMon Jun  7 17:38:06 EDT 2021


===

after pre-building the possibilities inside of the database...

% ./HipparchiaGoDBHelper -sv -l 3 -svdb lt0474 -svs 4 -sve 140000 -k "" -t 5 -p ${L}
  [HGH] Hipparchia Golang Helper CLI Debugging Interface (v.1.2.1) [loglevel=3]
  [HGH] Bagger Module Launched
  [HGH] Seeking to build *winnertakesall* bags of words
  [HGH] Connected to redis
  [HGH] Connected to hipparchiaDB on PostgreSQL
  [HGH] No redis key; gathering lines with a direct CLI PostgreSQL query
  [HGH] [A: 0.209s][Δ: 0.209s] 139997 lines acquired
  [HGH] [B: 0.289s][Δ: 0.080s] Unified text block built
  [HGH] [C: 0.440s][Δ: 0.151s] Preliminary cleanups complete
  [HGH] [D: 1.408s][Δ: 0.968s] Found 68790 sentences
  [HGH] [E: 1.467s][Δ: 0.059s] Found 80125 distinct words
  [HGH] [F: 1.855s][Δ: 0.389s] Got morphology for 73819 terms
  [HGH] [G: 1.884s][Δ: 0.029s] Built morphmap for 80290 terms
  [HGH] [H: 2.252s][Δ: 0.368s] Finished bagging 68790 bags
  [HGH] [I: 2.399s][Δ: 0.147s] Cleared stopwords: 67639 bags remain
  [HGH] [J: 3.603s][Δ: 1.204s] Finished loading

===

pipelined redis is fast

% ./HipparchiaGoDBHelper -sv -l 3 -svdb lt0474 -svs 4 -sve 149570 -k "" -t 6 -svbs 1 -p ${L}

  [HGH] Hipparchia Golang Helper CLI Debugging Interface (v.1.4.1) [loglevel=3]
  [HGH] Vector Bagger Launched
  [HGH] Seeking to build *winnertakesall* bags of words
  [HGH] Connected to redis
  [HGH] No redis key; gathering lines with a direct CLI PostgreSQL query
  [HGH] [A: 0.206s][Δ: 0.206s] 149567 lines acquired
  [HGH] [B: 0.298s][Δ: 0.092s] Unified text block built
  [HGH] [C: 0.480s][Δ: 0.182s] Preliminary cleanups complete
  [HGH] [D: 1.653s][Δ: 1.173s] Inserted 72930 sentences into 72930 bags
  [HGH] [E: 1.722s][Δ: 0.069s] Found 83267 distinct words
  [HGH] [F: 2.200s][Δ: 0.478s] Got morphology for 76646 terms
  [HGH] [G: 2.229s][Δ: 0.029s] Built morphmap for 83445 terms
  [HGH] [H: 2.604s][Δ: 0.376s] Finished bagging 72930 bags
  [HGH] [I: 2.762s][Δ: 0.158s] Cleared stopwords: 71830 bags remain
  [HGH] [J: 2.903s][Δ: 0.141s] Finished loading
  bags have been stored at _vectorresults%

// ./HipparchiaGoDBHelper -mprofile -cprofile -sv -l 3 -svdb lt0474 -svs 4 -sve 149570 -k "" -t 6 -svbs 1 -p ${L}

1069 •erik@big-sur-box• e-gun/HipparchiaGoDBHelper/ % go tool pprof ./HipparchiaGoDBHelper ./cpu_profiler_output.bin
File: HipparchiaGoDBHelper
Type: cpu
Time: Jul 4, 2021 at 11:41am (EDT)
Duration: 3.20s, Total samples = 2.84s (88.84%)
Entering interactive mode (type "help" for commands, "o" for options)
(pprof) top 25
Showing nodes accounting for 2000ms, 70.42% of 2840ms total
Dropped 84 nodes (cum <= 14.20ms)
Showing top 25 nodes out of 217
      flat  flat%   sum%        cum   cum%
     270ms  9.51%  9.51%      390ms 13.73%  regexp.(*Regexp).tryBacktrack
     170ms  5.99% 15.49%      170ms  5.99%  syscall.syscall
     130ms  4.58% 20.07%      130ms  4.58%  runtime.kevent
     130ms  4.58% 24.65%      140ms  4.93%  runtime.stkbucket
     120ms  4.23% 28.87%      120ms  4.23%  runtime.madvise
     120ms  4.23% 33.10%      120ms  4.23%  runtime.memmove
     120ms  4.23% 37.32%      250ms  8.80%  runtime.netpoll
      80ms  2.82% 40.14%       80ms  2.82%  regexp/syntax.ranges.Less
      70ms  2.46% 42.61%       70ms  2.46%  regexp/syntax.(*Inst).MatchRunePos
      70ms  2.46% 45.07%       70ms  2.46%  runtime.heapBitsSetType
      70ms  2.46% 47.54%      400ms 14.08%  runtime.mallocgc
      70ms  2.46% 50.00%       70ms  2.46%  runtime.pthread_cond_wait
      70ms  2.46% 52.46%       70ms  2.46%  strings.(*genericReplacer).WriteString
      60ms  2.11% 54.58%      270ms  9.51%  regexp/syntax.(*parser).parseClass
      50ms  1.76% 56.34%       80ms  2.82%  runtime.mapaccess1_faststr
      50ms  1.76% 58.10%       50ms  1.76%  runtime.pthread_cond_signal
      50ms  1.76% 59.86%       50ms  1.76%  runtime.usleep
      40ms  1.41% 61.27%       40ms  1.41%  aeshashbody
      40ms  1.41% 62.68%       90ms  3.17%  runtime.mapassign_faststr
      40ms  1.41% 64.08%       40ms  1.41%  runtime.memclrNoHeapPointers
      40ms  1.41% 65.49%       40ms  1.41%  runtime.nanotime1
      40ms  1.41% 66.90%       40ms  1.41%  runtime.pthread_kill
      40ms  1.41% 68.31%      150ms  5.28%  runtime.scanobject
      30ms  1.06% 69.37%      210ms  7.39%  main.buildwinnertakesallbagsofwords
      30ms  1.06% 70.42%      100ms  3.52%  main.fetchdblinesdirectly
(pprof) top25 -cum
Showing nodes accounting for 0.61s, 21.48% of 2.84s total
Dropped 84 nodes (cum <= 0.01s)
Showing top 25 nodes out of 217
      flat  flat%   sum%        cum   cum%
     0.01s  0.35%  0.35%      1.91s 67.25%  main.HipparchiaVectors
         0     0%  0.35%      1.91s 67.25%  main.main
         0     0%  0.35%      1.91s 67.25%  runtime.main
         0     0%  0.35%      1.01s 35.56%  main.stripper
         0     0%  0.35%      0.57s 20.07%  runtime.systemstack
         0     0%  0.35%      0.55s 19.37%  regexp.(*Regexp).ReplaceAllString
     0.01s  0.35%   0.7%      0.52s 18.31%  regexp.(*Regexp).replaceAll
     0.01s  0.35%  1.06%      0.48s 16.90%  regexp.(*Regexp).doExecute
         0     0%  1.06%      0.46s 16.20%  regexp.Compile (inline)
         0     0%  1.06%      0.46s 16.20%  regexp.MustCompile
         0     0%  1.06%      0.46s 16.20%  regexp.compile
     0.02s   0.7%  1.76%      0.41s 14.44%  regexp.(*Regexp).backtrack
     0.07s  2.46%  4.23%      0.40s 14.08%  runtime.mallocgc
     0.27s  9.51% 13.73%      0.39s 13.73%  regexp.(*Regexp).tryBacktrack
         0     0% 13.73%      0.36s 12.68%  regexp/syntax.Parse
         0     0% 13.73%      0.32s 11.27%  runtime.gcBgMarkWorker.func2
         0     0% 13.73%      0.32s 11.27%  runtime.gcDrain
         0     0% 13.73%      0.29s 10.21%  runtime.mstart
     0.06s  2.11% 15.85%      0.27s  9.51%  regexp/syntax.(*parser).parseClass
         0     0% 15.85%      0.25s  8.80%  runtime.gcBgMarkWorker
     0.12s  4.23% 20.07%      0.25s  8.80%  runtime.netpoll
     0.01s  0.35% 20.42%      0.24s  8.45%  runtime.growslice
     0.03s  1.06% 21.48%      0.21s  7.39%  main.buildwinnertakesallbagsofwords
         0     0% 21.48%      0.21s  7.39%  runtime.schedule
         0     0% 21.48%      0.20s  7.04%  runtime.mcall
(pprof) web


1082 •erik@big-sur-box• e-gun/HipparchiaGoDBHelper/ % go tool pprof HipparchiaGoDBHelper ./mem_profiler_output.bin
File: HipparchiaGoDBHelper
Type: inuse_space
Time: Jul 4, 2021 at 11:41am (EDT)
Entering interactive mode (type "help" for commands, "o" for options)
(pprof) top10
Showing nodes accounting for 18.87MB, 100% of 18.87MB total
      flat  flat%   sum%        cum   cum%
   11.58MB 61.36% 61.36%    11.58MB 61.36%  strings.(*genericReplacer).Replace
       5MB 26.50% 87.86%        5MB 26.50%  strings.(*Builder).grow (inline)
    2.29MB 12.14%   100%    18.87MB   100%  main.HipparchiaVectors
         0     0%   100%        5MB 26.50%  main.dropstopwords
         0     0%   100%    18.87MB   100%  main.main
         0     0%   100%    11.58MB 61.36%  main.splitonpunctuaton
         0     0%   100%    18.87MB   100%  runtime.main
         0     0%   100%        5MB 26.50%  strings.(*Builder).Grow (inline)
         0     0%   100%    11.58MB 61.36%  strings.(*Replacer).Replace
         0     0%   100%        5MB 26.50%  strings.Join
(pprof) top10 -cum
Showing nodes accounting for 18.87MB, 100% of 18.87MB total
      flat  flat%   sum%        cum   cum%
    2.29MB 12.14% 12.14%    18.87MB   100%  main.HipparchiaVectors
         0     0% 12.14%    18.87MB   100%  main.main
         0     0% 12.14%    18.87MB   100%  runtime.main
         0     0% 12.14%    11.58MB 61.36%  main.splitonpunctuaton
         0     0% 12.14%    11.58MB 61.36%  strings.(*Replacer).Replace
   11.58MB 61.36% 73.50%    11.58MB 61.36%  strings.(*genericReplacer).Replace
         0     0% 73.50%        5MB 26.50%  main.dropstopwords
         0     0% 73.50%        5MB 26.50%  strings.(*Builder).Grow (inline)
       5MB 26.50%   100%        5MB 26.50%  strings.(*Builder).grow (inline)
         0     0%   100%        5MB 26.50%  strings.Join

// fyi:
//  https://segment.com/blog/allocation-efficiency-in-high-performance-go-services/
//  https://blog.golang.org/pprof
//  https://software.intel.com/content/www/us/en/develop/blogs/debugging-performance-issues-in-go-programs.html


why is "υθμόν" in the vector results for aristotle gr0086?